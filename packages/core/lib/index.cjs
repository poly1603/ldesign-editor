/*!
 * ***********************************
 * @ldesign/editor-core v3.0.0     *
 * Built with rollup               *
 * Build time: 2024-10-30 16:01:17 *
 * Build mode: production          *
 * Minified: No                    *
 * ***********************************
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tablePatch = require('./plugins/table-patch.cjs');
var AIService = require('./ai/AIService.cjs');
var BaiduProvider = require('./ai/providers/BaiduProvider.cjs');
var ClaudeProvider = require('./ai/providers/ClaudeProvider.cjs');
var DeepSeekProvider = require('./ai/providers/DeepSeekProvider.cjs');
var GLMProvider = require('./ai/providers/GLMProvider.cjs');
var OpenAIProvider = require('./ai/providers/OpenAIProvider.cjs');
var QwenProvider = require('./ai/providers/QwenProvider.cjs');
var SparkProvider = require('./ai/providers/SparkProvider.cjs');
var types = require('./ai/types.cjs');
var CollaborationManager = require('./collaboration/CollaborationManager.cjs');
var CRDT = require('./collaboration/crdt/CRDT.cjs');
var ConfigManager = require('./config/ConfigManager.cjs');
var ConfigValidator = require('./config/ConfigValidator.cjs');
var editor_config_example = require('./config/editor.config.example.cjs');
var index = require('./config/presets/index.cjs');
var BasePlugin = require('./core/base/BasePlugin.cjs');
var Command = require('./core/Command.cjs');
var Document = require('./core/Document.cjs');
var Editor = require('./core/Editor.cjs');
var EditorBuilder = require('./core/EditorBuilder.cjs');
var EditorVirtualScroller = require('./core/EditorVirtualScroller.cjs');
var ErrorBoundary = require('./core/ErrorBoundary.cjs');
var event = require('./utils/event.cjs');
var FeatureFlags = require('./core/FeatureFlags.cjs');
var IncrementalRenderer = require('./core/IncrementalRenderer.cjs');
var LazyLoader = require('./core/LazyLoader.cjs');
var OptimizedEventEmitter = require('./core/OptimizedEventEmitter.cjs');
var Plugin = require('./core/Plugin.cjs');
var PluginRegistry = require('./core/PluginRegistry.cjs');
var Schema = require('./core/Schema.cjs');
var Selection = require('./core/Selection.cjs');
var VirtualScroller = require('./core/VirtualScroller.cjs');
var DebugPanel = require('./devtools/DebugPanel.cjs');
var AuditLogger = require('./enterprise/audit/AuditLogger.cjs');
var PermissionManager = require('./enterprise/auth/PermissionManager.cjs');
var SSOManager = require('./enterprise/auth/SSOManager.cjs');
var index$1 = require('./i18n/index.cjs');
var IconManager = require('./icons/IconManager.cjs');
var feather = require('./icons/sets/feather.cjs');
var lucide = require('./icons/sets/lucide.cjs');
var material = require('./icons/sets/material.cjs');
var PluginMarket = require('./marketplace/PluginMarket.cjs');
var ContextMenu = require('./mobile/components/ContextMenu.cjs');
var MobileToolbar = require('./mobile/components/MobileToolbar.cjs');
var SwipeMenu = require('./mobile/components/SwipeMenu.cjs');
var GestureRecognizer = require('./mobile/gestures/GestureRecognizer.cjs');
var MobileEditorAdapter = require('./mobile/MobileEditorAdapter.cjs');
var index$4 = require('./plugins/index.cjs');
var DiagramPlugin = require('./plugins/diagrams/DiagramPlugin.cjs');
require('./plugins/diagrams/DiagramRenderer.cjs');
require('./plugins/diagrams/DiagramToolbar.cjs');
require('./plugins/diagrams/editors/FlowchartEditor.cjs');
require('./plugins/diagrams/editors/MindMapEditor.cjs');
require('./plugins/diagrams/editors/UMLEditor.cjs');
require('./pwa/BackgroundSyncManager.cjs');
require('./pwa/CacheManager.cjs');
require('./pwa/InstallPromptManager.cjs');
var OfflineStorage = require('./pwa/OfflineStorage.cjs');
var PWAManager = require('./pwa/PWAManager.cjs');
require('./pwa/ServiceWorkerManager.cjs');
var index$2 = require('./theme/index.cjs');
var AIConfigDialog = require('./ui/AIConfigDialog.cjs');
var AIDialog = require('./ui/AIDialog.cjs');
var AISuggestionsOverlay = require('./ui/AISuggestionsOverlay.cjs');
var ComponentFactory = require('./ui/base/ComponentFactory.cjs');
var ColorPicker = require('./ui/ColorPicker.cjs');
var ConfigComparison = require('./ui/ConfigComparison.cjs');
var ConfigPreview = require('./ui/ConfigPreview.cjs');
var ConfigWizard = require('./ui/ConfigWizard.cjs');
var Dropdown = require('./ui/Dropdown.cjs');
var EmojiPicker = require('./ui/EmojiPicker.cjs');
var FeatureManagerPanel = require('./ui/FeatureManagerPanel.cjs');
var FindReplaceDialog = require('./ui/FindReplaceDialog.cjs');
var index$3 = require('./ui/icons/index.cjs');
var PluginMarketPanel = require('./ui/PluginMarketPanel.cjs');
var SettingsPanel = require('./ui/SettingsPanel.cjs');
var TableDialog = require('./ui/TableDialog.cjs');
var TableGridSelector = require('./ui/TableGridSelector.cjs');
var Toolbar = require('./ui/Toolbar.cjs');
var ToolbarManager = require('./ui/ToolbarManager.cjs');
var UnifiedDialog = require('./ui/UnifiedDialog.cjs');
var UploadProgress = require('./ui/UploadProgress.cjs');
var AutoOptimizer = require('./utils/AutoOptimizer.cjs');
var helpers = require('./utils/helpers.cjs');
var PerformanceMonitor = require('./utils/PerformanceMonitor.cjs');
var shortcuts = require('./utils/shortcuts.cjs');
var simplify = require('./utils/simplify.cjs');
var WasmAccelerator = require('./wasm/WasmAccelerator.cjs');
var WasmDiff = require('./wasm/WasmDiff.cjs');
var WasmParser = require('./wasm/WasmParser.cjs');
var AIPluginV2 = require('./plugins/ai/AIPluginV2.cjs');
var template = require('./plugins/template.cjs');
var formattingCommands = require('./plugins/formatting/formatting-commands.cjs');
var image = require('./plugins/media/image.cjs');
var index$7 = require('./plugins/media/image-resize/index.cjs');
var mediaCommands = require('./plugins/media/media-commands.cjs');
var MediaContextMenuPlugin = require('./plugins/media/media-context-menu/MediaContextMenuPlugin.cjs');
var mediaDialog = require('./plugins/media/media-dialog.cjs');
var contextMenu = require('./plugins/utils/context-menu.cjs');
var exportMarkdown = require('./plugins/utils/export-markdown.cjs');
var findReplace = require('./plugins/utils/find-replace.cjs');
var fullscreen = require('./plugins/utils/fullscreen.cjs');
var history = require('./plugins/utils/history.cjs');
var wordCount = require('./plugins/utils/word-count.cjs');
var codeblock = require('./plugins/codeblock.cjs');
var emoji = require('./plugins/emoji.cjs');
var align = require('./plugins/formatting/align.cjs');
var color = require('./plugins/formatting/color.cjs');
var font = require('./plugins/formatting/font.cjs');
var formatting = require('./plugins/formatting/formatting.cjs');
var indent = require('./plugins/formatting/indent.cjs');
var lineHeight = require('./plugins/formatting/line-height.cjs');
var script = require('./plugins/formatting/script.cjs');
var textTransform = require('./plugins/formatting/text-transform.cjs');
var index$5 = require('./plugins/formatting/index.cjs');
var index$6 = require('./plugins/media/index.cjs');
var table = require('./plugins/table.cjs');
var tableEnhanced = require('./plugins/table-enhanced.cjs');
var blockquote = require('./plugins/text/blockquote.cjs');
var heading = require('./plugins/text/heading.cjs');
var link = require('./plugins/text/link.cjs');
var list = require('./plugins/text/list.cjs');
var index$8 = require('./plugins/text/index.cjs');
var index$9 = require('./plugins/utils/index.cjs');

/**
 * @ldesign/editor
 * 功能强大、扩展性强的富文本编辑器
 */
// 应用表格补丁 - 自动替换旧的表格插入功能
// 自动应用补丁
if (typeof window !== 'undefined') {
    // 延迟执行，确保编辑器已初始化
    setTimeout(() => {
        tablePatch.patchTableInsertCommand();
    }, 500);
}

exports.patchTableInsertCommand = tablePatch.patchTableInsertCommand;
exports.AIService = AIService.AIService;
exports.getAIService = AIService.getAIService;
exports.resetAIService = AIService.resetAIService;
exports.BaiduProvider = BaiduProvider.BaiduProvider;
exports.ClaudeProvider = ClaudeProvider.ClaudeProvider;
exports.DeepSeekProvider = DeepSeekProvider.DeepSeekProvider;
exports.GLMProvider = GLMProvider.GLMProvider;
exports.OpenAIProvider = OpenAIProvider.OpenAIProvider;
exports.QwenProvider = QwenProvider.QwenProvider;
exports.SparkProvider = SparkProvider.SparkProvider;
exports.defaultAIConfig = types.defaultAIConfig;
exports.CollaborationManager = CollaborationManager.CollaborationManager;
exports.CRDT = CRDT.CRDT;
exports.ConfigManager = ConfigManager.ConfigManager;
exports.getConfigManager = ConfigManager.getConfigManager;
exports.resetConfigManager = ConfigManager.resetConfigManager;
exports.ConfigValidator = ConfigValidator.ConfigValidator;
exports.autoFixConfig = ConfigValidator.autoFixConfig;
exports.getConfigValidator = ConfigValidator.getConfigValidator;
exports.validateConfig = ConfigValidator.validateConfig;
exports.editorConfigExample = editor_config_example.editorConfigExample;
exports.fullFeaturedConfig = editor_config_example.fullFeaturedConfig;
exports.lightweightConfig = editor_config_example.lightweightConfig;
exports.performanceConfigExample = editor_config_example.performanceConfigExample;
exports.pluginConfigExample = editor_config_example.pluginConfigExample;
exports.toolbarConfigExample = editor_config_example.toolbarConfigExample;
exports.aiEnhancedPreset = index.aiEnhancedPreset;
exports.blogPreset = index.blogPreset;
exports.cmsPreset = index.cmsPreset;
exports.codeDocPreset = index.codeDocPreset;
exports.collaborationPreset = index.collaborationPreset;
exports.commentPreset = index.commentPreset;
exports.emailPreset = index.emailPreset;
exports.getPreset = index.getPreset;
exports.getPresetNames = index.getPresetNames;
exports.markdownPreset = index.markdownPreset;
exports.minimalPreset = index.minimalPreset;
exports.mobilePreset = index.mobilePreset;
exports.notePreset = index.notePreset;
exports.presetDescriptions = index.presetDescriptions;
exports.presets = index.presets;
exports.richTextPreset = index.richTextPreset;
exports.BasePlugin = BasePlugin.BasePlugin;
exports.CommandManager = Command.CommandManager;
exports.KeymapManager = Command.KeymapManager;
exports.Document = Document.Document;
exports.Editor = Editor.Editor;
exports.default = Editor.Editor;
exports.EditorBuilder = EditorBuilder.EditorBuilder;
exports.createEditor = EditorBuilder.createEditor;
exports.createFormatOnlyEditor = EditorBuilder.createFormatOnlyEditor;
exports.createFullFeaturedEditor = EditorBuilder.createFullFeaturedEditor;
exports.createLightweightEditor = EditorBuilder.createLightweightEditor;
exports.EditorVirtualScroller = EditorVirtualScroller.EditorVirtualScroller;
exports.ErrorBoundary = ErrorBoundary.ErrorBoundary;
exports.captureError = ErrorBoundary.captureError;
exports.getErrorBoundary = ErrorBoundary.getErrorBoundary;
exports.withErrorBoundary = ErrorBoundary.withErrorBoundary;
exports.EventEmitter = event.EventEmitter;
Object.defineProperty(exports, "FeatureCategory", {
    enumerable: true,
    get: function () { return FeatureFlags.FeatureCategory; }
});
exports.FeatureFlags = FeatureFlags.FeatureFlags;
exports.getFeatureFlags = FeatureFlags.getFeatureFlags;
exports.resetFeatureFlags = FeatureFlags.resetFeatureFlags;
exports.IncrementalRenderer = IncrementalRenderer.IncrementalRenderer;
exports.LazyLoader = LazyLoader.LazyLoader;
exports.getLazyLoader = LazyLoader.getLazyLoader;
exports.resetLazyLoader = LazyLoader.resetLazyLoader;
exports.OptimizedEventEmitter = OptimizedEventEmitter.OptimizedEventEmitter;
exports.Plugin = Plugin.Plugin;
exports.PluginManager = Plugin.PluginManager;
exports.createPlugin = Plugin.createPlugin;
Object.defineProperty(exports, "PluginCategory", {
    enumerable: true,
    get: function () { return PluginRegistry.PluginCategory; }
});
exports.PluginRegistry = PluginRegistry.PluginRegistry;
exports.getPluginRegistry = PluginRegistry.getPluginRegistry;
exports.resetPluginRegistry = PluginRegistry.resetPluginRegistry;
exports.Schema = Schema.Schema;
exports.defaultSchema = Schema.defaultSchema;
exports.Selection = Selection.Selection;
exports.SelectionManager = Selection.SelectionManager;
exports.VirtualScroller = VirtualScroller.VirtualScroller;
exports.DebugPanel = DebugPanel.DebugPanel;
exports.AuditLogger = AuditLogger.AuditLogger;
exports.PermissionManager = PermissionManager.PermissionManager;
exports.SSOManager = SSOManager.SSOManager;
exports.I18nManager = index$1.I18nManager;
exports.getI18n = index$1.getI18n;
exports.t = index$1.t;
exports.IconManager = IconManager.IconManager;
exports.getIconManager = IconManager.getIconManager;
exports.resetIconManager = IconManager.resetIconManager;
exports.FeatherIconSet = feather.FeatherIconSet;
exports.LucideIconSet = lucide.LucideIconSet;
exports.MaterialIconSet = material.MaterialIconSet;
exports.PluginMarket = PluginMarket.PluginMarket;
exports.getPluginMarket = PluginMarket.getPluginMarket;
exports.ContextMenu = ContextMenu.ContextMenu;
exports.MobileToolbar = MobileToolbar.MobileToolbar;
exports.SwipeMenu = SwipeMenu.SwipeMenu;
exports.GestureRecognizer = GestureRecognizer.GestureRecognizer;
exports.MobileEditorAdapter = MobileEditorAdapter.MobileEditorAdapter;
exports.allPlugins = index$4.allPlugins;
exports.defaultPlugins = index$4.defaultPlugins;
exports.extendedPlugins = index$4.extendedPlugins;
exports.DiagramPlugin = DiagramPlugin.DiagramPlugin;
exports.OfflineStorage = OfflineStorage.OfflineStorage;
exports.PWAManager = PWAManager.PWAManager;
exports.ThemeManager = index$2.ThemeManager;
exports.getAvailableThemes = index$2.getAvailableThemes;
exports.getCurrentTheme = index$2.getCurrentTheme;
exports.getThemeManager = index$2.getThemeManager;
exports.setTheme = index$2.setTheme;
exports.showAIConfigDialog = AIConfigDialog.showAIConfigDialog;
exports.AIMockUtils = AIDialog.AIMockUtils;
exports.showAIDialog = AIDialog.showAIDialog;
exports.showAISuggestionsOverlay = AISuggestionsOverlay.showAISuggestionsOverlay;
exports.ComponentFactory = ComponentFactory.ComponentFactory;
exports.createButton = ComponentFactory.createButton;
exports.createCheckbox = ComponentFactory.createCheckbox;
exports.createIconButton = ComponentFactory.createIconButton;
exports.createInput = ComponentFactory.createInput;
exports.createSelect = ComponentFactory.createSelect;
exports.getComponentFactory = ComponentFactory.getComponentFactory;
exports.createColorPicker = ColorPicker.createColorPicker;
exports.showColorPicker = ColorPicker.showColorPicker;
exports.ConfigComparison = ConfigComparison.ConfigComparison;
exports.showConfigComparison = ConfigComparison.showConfigComparison;
exports.ConfigPreview = ConfigPreview.ConfigPreview;
exports.showConfigPreview = ConfigPreview.showConfigPreview;
exports.ConfigWizard = ConfigWizard.ConfigWizard;
exports.showConfigWizard = ConfigWizard.showConfigWizard;
exports.createDropdown = Dropdown.createDropdown;
exports.showDropdown = Dropdown.showDropdown;
exports.showEmojiPicker = EmojiPicker.showEmojiPicker;
exports.FeatureManagerPanel = FeatureManagerPanel.FeatureManagerPanel;
exports.showFeatureManager = FeatureManagerPanel.showFeatureManager;
exports.createFindReplaceDialog = FindReplaceDialog.createFindReplaceDialog;
exports.showFindReplaceDialog = FindReplaceDialog.showFindReplaceDialog;
exports.createIcon = index$3.createIcon;
exports.getIconHTML = index$3.getIconHTML;
exports.PluginMarketPanel = PluginMarketPanel.PluginMarketPanel;
exports.showPluginMarket = PluginMarketPanel.showPluginMarket;
exports.SettingsPanel = SettingsPanel.SettingsPanel;
exports.showSettingsPanel = SettingsPanel.showSettingsPanel;
exports.showTableDialog = TableDialog.showTableDialog;
exports.showEnhancedTableGridSelector = TableGridSelector.showEnhancedTableGridSelector;
exports.showTableGridSelector = TableGridSelector.showTableGridSelector;
exports.Toolbar = Toolbar.Toolbar;
exports.ToolbarManager = ToolbarManager.ToolbarManager;
exports.UnifiedDialog = UnifiedDialog.UnifiedDialog;
exports.showAlertDialog = UnifiedDialog.showAlertDialog;
exports.showConfirmDialog = UnifiedDialog.showConfirmDialog;
exports.showPromptDialog = UnifiedDialog.showPromptDialog;
exports.showUnifiedDialog = UnifiedDialog.showUnifiedDialog;
exports.UploadProgress = UploadProgress.UploadProgress;
exports.createUploadProgress = UploadProgress.createUploadProgress;
exports.showUploadProgress = UploadProgress.showUploadProgress;
exports.AutoOptimizer = AutoOptimizer.AutoOptimizer;
exports.getAutoOptimizer = AutoOptimizer.getAutoOptimizer;
exports.startAutoOptimization = AutoOptimizer.startAutoOptimization;
exports.stopAutoOptimization = AutoOptimizer.stopAutoOptimization;
exports.Batcher = helpers.Batcher;
exports.LRUCache = helpers.LRUCache;
exports.clamp = helpers.clamp;
exports.debounce = helpers.debounce;
exports.deepClone = helpers.deepClone;
exports.deepMerge = helpers.deepMerge;
exports.delay = helpers.delay;
exports.formatDuration = helpers.formatDuration;
exports.formatFileSize = helpers.formatFileSize;
exports.generateId = helpers.generateId;
exports.isEmpty = helpers.isEmpty;
exports.retry = helpers.retry;
exports.throttle = helpers.throttle;
exports.PerformanceMonitor = PerformanceMonitor.PerformanceMonitor;
exports.endTimer = PerformanceMonitor.endTimer;
exports.getPerformanceMonitor = PerformanceMonitor.getPerformanceMonitor;
exports.measure = PerformanceMonitor.measure;
exports.startTimer = PerformanceMonitor.startTimer;
exports.batch = shortcuts.batch;
exports.debug = shortcuts.debug;
exports.editor = shortcuts.editor;
exports.optimize = shortcuts.optimize;
exports.quick = shortcuts.quick;
exports.$ = simplify.$;
exports.classNames = simplify.classNames;
exports.cmd = simplify.cmd;
exports.css = simplify.css;
exports.on = simplify.on;
exports.str = simplify.str;
exports.ui = simplify.ui;
exports.WasmAccelerator = WasmAccelerator.WasmAccelerator;
exports.WasmDiff = WasmDiff.WasmDiff;
exports.WasmParser = WasmParser.WasmParser;
exports.AIPlugin = AIPluginV2.default;
exports.TemplatePlugin = template.default;
exports.getTemplateManager = template.getTemplateManager;
exports.FormattingCommandsPlugin = formattingCommands.default;
exports.ImagePlugin = image.ImagePlugin;
exports.ImageResizePlugin = index$7.ImageResizePlugin;
exports.MediaCommandsPlugin = mediaCommands.default;
exports.MediaContextMenuPlugin = MediaContextMenuPlugin.MediaContextMenuPlugin;
exports.MediaDialogPlugin = mediaDialog.MediaDialogPlugin;
exports.ContextMenuPlugin = contextMenu.ContextMenuPlugin;
exports.ExportMarkdownPlugin = exportMarkdown.ExportMarkdownPlugin;
exports.FindReplacePlugin = findReplace.FindReplacePlugin;
exports.FullscreenPlugin = fullscreen.default;
exports.HistoryPlugin = history.default;
exports.WordCountPlugin = wordCount.default;
exports.CodeBlockPlugin = codeblock.CodeBlockPlugin;
exports.EmojiPlugin = emoji.EmojiPlugin;
exports.AlignPlugin = align.AlignPlugin;
exports.BackgroundColorPlugin = color.BackgroundColorPlugin;
exports.PRESET_COLORS = color.PRESET_COLORS;
exports.TextColorPlugin = color.TextColorPlugin;
exports.FONT_FAMILIES = font.FONT_FAMILIES;
exports.FONT_SIZES = font.FONT_SIZES;
exports.FontFamilyPlugin = font.FontFamilyPlugin;
exports.FontSizePlugin = font.FontSizePlugin;
exports.BoldPlugin = formatting.BoldPlugin;
exports.ClearFormatPlugin = formatting.ClearFormatPlugin;
exports.CodePlugin = formatting.CodePlugin;
exports.InlineCodePlugin = formatting.InlineCodePlugin;
exports.ItalicPlugin = formatting.ItalicPlugin;
exports.StrikePlugin = formatting.StrikePlugin;
exports.UnderlinePlugin = formatting.UnderlinePlugin;
exports.IndentPlugin = indent.IndentPlugin;
exports.LINE_HEIGHTS = lineHeight.LINE_HEIGHTS;
exports.LineHeightPlugin = lineHeight.LineHeightPlugin;
exports.SubscriptPlugin = script.SubscriptPlugin;
exports.SuperscriptPlugin = script.SuperscriptPlugin;
exports.CapitalizePlugin = textTransform.CapitalizePlugin;
exports.LowerCasePlugin = textTransform.LowerCasePlugin;
exports.TextTransformPlugin = textTransform.TextTransformPlugin;
exports.UpperCasePlugin = textTransform.UpperCasePlugin;
exports.formattingPlugins = index$5.formattingPlugins;
exports.mediaPlugins = index$6.mediaPlugins;
exports.TablePlugin = table.TablePlugin;
exports.tablePlugins = table.tablePlugins;
exports.EnhancedTablePlugin = tableEnhanced.EnhancedTablePlugin;
exports.BlockquotePlugin = blockquote.BlockquotePlugin;
exports.HeadingPlugin = heading.HeadingPlugin;
exports.LinkPlugin = link.LinkPlugin;
exports.BulletListPlugin = list.BulletListPlugin;
exports.OrderedListPlugin = list.OrderedListPlugin;
exports.TaskListPlugin = list.TaskListPlugin;
exports.textPlugins = index$8.textPlugins;
exports.utilPlugins = index$9.utilPlugins;
/*! End of @ldesign/editor-core | Powered by @ldesign/builder */
//# sourceMappingURL=index.cjs.map
