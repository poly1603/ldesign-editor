/*!
 * ***********************************
 * @ldesign/editor-core v3.0.0     *
 * Built with rollup               *
 * Build time: 2024-10-30 16:01:17 *
 * Build mode: production          *
 * Minified: No                    *
 * ***********************************
 */
import { createLogger } from '../../utils/logger.js';
import { DiagramRenderer } from './DiagramRenderer.js';
import { DiagramToolbar } from './DiagramToolbar.js';
import { FlowchartEditor } from './editors/FlowchartEditor.js';
import { GanttEditor } from './editors/GanttEditor.js';
import { MindMapEditor } from './editors/MindMapEditor.js';
import { SequenceDiagramEditor } from './editors/SequenceDiagramEditor.js';
import { UMLEditor } from './editors/UMLEditor.js';

/**
 * ÂõæË°®Êèí‰ª∂
 * Êèê‰æõÊÄùÁª¥ÂØºÂõæ„ÄÅÊµÅÁ®ãÂõæ„ÄÅUMLÂõæÁ≠âÂõæË°®ÁºñËæëÊîØÊåÅ
 */
const logger = createLogger('DiagramPlugin');
class DiagramPlugin {
    constructor() {
        this.name = 'diagram';
        this.version = '1.0.0';
        this.description = 'È´òÁ∫ßÂõæË°®ÁºñËæëÊîØÊåÅ';
        this.editors = new Map();
    }
    /**
     * ÂàùÂßãÂåñÊèí‰ª∂
     */
    async init(context) {
        logger.info('Initializing diagram plugin');
        this.context = context;
        // ÂàùÂßãÂåñÊ∏≤ÊüìÂô®
        this.renderer = new DiagramRenderer({
            editor: context.editor,
        });
        // ÂàùÂßãÂåñÂ∑•ÂÖ∑Ê†è
        this.toolbar = new DiagramToolbar({
            editor: context.editor,
            onInsertDiagram: type => this.insertDiagram(type),
            onEditDiagram: node => this.editDiagram(node),
        });
        // Ê≥®ÂÜåÁºñËæëÂô®
        this.registerEditors();
        // Ê≥®ÂÜåÂëΩ‰ª§
        this.registerCommands();
        // Ê≥®ÂÜåËäÇÁÇπËßÜÂõæ
        this.registerNodeViews();
        // ËÆæÁΩÆ‰∫ã‰ª∂ÁõëÂê¨
        this.setupEventListeners();
        logger.info('Diagram plugin initialized');
    }
    /**
     * Ê≥®ÂÜåÁºñËæëÂô®
     */
    registerEditors() {
        this.editors.set('mindmap', new MindMapEditor());
        this.editors.set('flowchart', new FlowchartEditor());
        this.editors.set('uml', new UMLEditor());
        this.editors.set('sequence', new SequenceDiagramEditor());
        this.editors.set('gantt', new GanttEditor());
    }
    /**
     * Ê≥®ÂÜåÂëΩ‰ª§
     */
    registerCommands() {
        const { commands } = this.context;
        // ÊèíÂÖ•ÂõæË°®ÂëΩ‰ª§
        commands.register('insertMindMap', {
            label: 'ÊèíÂÖ•ÊÄùÁª¥ÂØºÂõæ',
            icon: 'üß†',
            execute: () => this.insertDiagram('mindmap'),
        });
        commands.register('insertFlowchart', {
            label: 'ÊèíÂÖ•ÊµÅÁ®ãÂõæ',
            icon: 'üîÄ',
            execute: () => this.insertDiagram('flowchart'),
        });
        commands.register('insertUML', {
            label: 'ÊèíÂÖ•UMLÂõæ',
            icon: 'üìê',
            execute: () => this.insertDiagram('uml'),
        });
        commands.register('insertSequenceDiagram', {
            label: 'ÊèíÂÖ•Êó∂Â∫èÂõæ',
            icon: 'üìä',
            execute: () => this.insertDiagram('sequence'),
        });
        commands.register('insertGantt', {
            label: 'ÊèíÂÖ•ÁîòÁâπÂõæ',
            icon: 'üìÖ',
            execute: () => this.insertDiagram('gantt'),
        });
        // ÁºñËæëÂõæË°®ÂëΩ‰ª§
        commands.register('editDiagram', {
            label: 'ÁºñËæëÂõæË°®',
            icon: '‚úèÔ∏è',
            execute: () => {
                const node = this.getSelectedDiagramNode();
                if (node)
                    this.editDiagram(node);
            },
        });
        // ÂØºÂá∫ÂõæË°®ÂëΩ‰ª§
        commands.register('exportDiagram', {
            label: 'ÂØºÂá∫ÂõæË°®',
            icon: 'üíæ',
            execute: () => this.exportDiagram(),
        });
    }
    /**
     * Ê≥®ÂÜåËäÇÁÇπËßÜÂõæ
     */
    registerNodeViews() {
        const { schema } = this.context.editor;
        // Ê≥®ÂÜåÂõæË°®ËäÇÁÇπ
        schema.nodes.diagram = {
            attrs: {
                type: { default: 'mindmap' },
                data: { default: null },
                width: { default: '100%' },
                height: { default: 400 },
            },
            content: 'text*',
            group: 'block',
            draggable: true,
            parseDOM: [{
                    tag: 'div[data-diagram]',
                    getAttrs: (dom) => ({
                        type: dom.dataset.diagramType,
                        data: JSON.parse(dom.dataset.diagramData || '{}'),
                        width: dom.style.width,
                        height: dom.style.height,
                    }),
                }],
            toDOM: (node) => ['div', {
                    'data-diagram': 'true',
                    'data-diagram-type': node.attrs.type,
                    'data-diagram-data': JSON.stringify(node.attrs.data),
                    'style': `width: ${node.attrs.width}; height: ${node.attrs.height}px`,
                    'class': 'diagram-node',
                }, 0],
        };
    }
    /**
     * ËÆæÁΩÆ‰∫ã‰ª∂ÁõëÂê¨
     */
    setupEventListeners() {
        const { editor } = this.context;
        // ÁõëÂê¨ÈÄâÊã©ÂèòÂåñ
        editor.on('selectionUpdate', () => {
            const node = this.getSelectedDiagramNode();
            this.toolbar?.updateState(!!node);
        });
        // ÁõëÂê¨ÂèåÂáªÁºñËæë
        editor.contentElement?.addEventListener('dblclick', (e) => {
            const target = e.target;
            const diagramNode = target.closest('.diagram-node');
            if (diagramNode)
                this.editDiagram(diagramNode);
        });
    }
    /**
     * ÊèíÂÖ•ÂõæË°®
     */
    async insertDiagram(type, data) {
        logger.info(`Inserting ${type} diagram`);
        // ÂàõÂª∫ÁºñËæëÂô®
        const editor = this.editors.get(type);
        if (!editor) {
            logger.error(`Unknown diagram type: ${type}`);
            return;
        }
        // ÊòæÁ§∫ÁºñËæëÂô®
        this.currentType = type;
        this.currentEditor = editor;
        const result = await this.showEditor(editor, {
            type,
            data: data || this.getDefaultData(type),
            isNew: true,
        });
        if (result) {
            // ÊèíÂÖ•ÂõæË°®ËäÇÁÇπ
            const { commands } = this.context;
            commands.execute('insertNode', {
                type: 'diagram',
                attrs: {
                    type,
                    data: result.data,
                    width: result.options?.width || '100%',
                    height: result.options?.height || 400,
                },
            });
        }
    }
    /**
     * ÁºñËæëÂõæË°®
     */
    async editDiagram(node) {
        const type = node.dataset.diagramType;
        const data = JSON.parse(node.dataset.diagramData || '{}');
        logger.info(`Editing ${type} diagram`);
        const editor = this.editors.get(type);
        if (!editor) {
            logger.error(`Unknown diagram type: ${type}`);
            return;
        }
        this.currentType = type;
        this.currentEditor = editor;
        const result = await this.showEditor(editor, {
            type,
            data,
            isNew: false,
            node,
        });
        if (result) {
            // Êõ¥Êñ∞ÂõæË°®Êï∞ÊçÆ
            node.dataset.diagramData = JSON.stringify(result.data);
            // ÈáçÊñ∞Ê∏≤Êüì
            this.renderer?.render(node, type, result.data);
        }
    }
    /**
     * ÊòæÁ§∫ÁºñËæëÂô®
     */
    async showEditor(editor, options) {
        // ÂàõÂª∫ÁºñËæëÂô®ÂÆπÂô®
        const modal = this.createModal();
        document.body.appendChild(modal);
        // Ê∏≤ÊüìÁºñËæëÂô®
        const container = modal.querySelector('.diagram-editor-content');
        const result = await editor.render(container, {
            data: options.data,
            onSave: (data, opts) => {
                this.closeModal(modal);
                return { data, options: opts };
            },
            onCancel: () => {
                this.closeModal(modal);
                return null;
            },
        });
        return result;
    }
    /**
     * ÂàõÂª∫Ê®°ÊÄÅÊ°Ü
     */
    createModal() {
        const modal = document.createElement('div');
        modal.className = 'diagram-editor-modal';
        modal.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 10000;
    `;
        modal.innerHTML = `
      <div class="diagram-editor-dialog" style="
        background: white;
        border-radius: 8px;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
        width: 90%;
        max-width: 1200px;
        height: 80vh;
        display: flex;
        flex-direction: column;
        overflow: hidden;
      ">
        <div class="diagram-editor-header" style="
          padding: 15px 20px;
          border-bottom: 1px solid #e0e0e0;
          display: flex;
          align-items: center;
          justify-content: space-between;
        ">
          <h3 style="margin: 0; font-size: 18px;">
            ${this.getEditorTitle(this.currentType)}
          </h3>
          <button class="close-btn" style="
            background: transparent;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: #999;
          ">√ó</button>
        </div>
        <div class="diagram-editor-content" style="
          flex: 1;
          overflow: auto;
          padding: 20px;
        "></div>
      </div>
    `;
        // ÁÇπÂáªËÉåÊôØÂÖ≥Èó≠
        modal.addEventListener('click', (e) => {
            if (e.target === modal)
                this.closeModal(modal);
        });
        // ÂÖ≥Èó≠ÊåâÈíÆ
        const closeBtn = modal.querySelector('.close-btn');
        closeBtn?.addEventListener('click', () => {
            this.closeModal(modal);
        });
        return modal;
    }
    /**
     * ÂÖ≥Èó≠Ê®°ÊÄÅÊ°Ü
     */
    closeModal(modal) {
        modal.remove();
        this.currentEditor?.destroy?.();
        this.currentEditor = null;
        this.currentType = undefined;
    }
    /**
     * Ëé∑ÂèñÁºñËæëÂô®Ê†áÈ¢ò
     */
    getEditorTitle(type) {
        const titles = {
            mindmap: 'ÊÄùÁª¥ÂØºÂõæÁºñËæëÂô®',
            flowchart: 'ÊµÅÁ®ãÂõæÁºñËæëÂô®',
            uml: 'UMLÂõæÁºñËæëÂô®',
            sequence: 'Êó∂Â∫èÂõæÁºñËæëÂô®',
            gantt: 'ÁîòÁâπÂõæÁºñËæëÂô®',
        };
        return titles[type] || 'ÂõæË°®ÁºñËæëÂô®';
    }
    /**
     * Ëé∑ÂèñÈªòËÆ§Êï∞ÊçÆ
     */
    getDefaultData(type) {
        switch (type) {
            case 'mindmap':
                return {
                    root: {
                        text: '‰∏≠ÂøÉ‰∏ªÈ¢ò',
                        children: [
                            { text: 'ÂàÜÊîØ1', children: [] },
                            { text: 'ÂàÜÊîØ2', children: [] },
                            { text: 'ÂàÜÊîØ3', children: [] },
                        ],
                    },
                };
            case 'flowchart':
                return {
                    nodes: [
                        { id: '1', type: 'start', text: 'ÂºÄÂßã', x: 100, y: 50 },
                        { id: '2', type: 'process', text: 'Â§ÑÁêÜ', x: 100, y: 150 },
                        { id: '3', type: 'end', text: 'ÁªìÊùü', x: 100, y: 250 },
                    ],
                    edges: [
                        { from: '1', to: '2' },
                        { from: '2', to: '3' },
                    ],
                };
            case 'uml':
                return {
                    classes: [
                        {
                            name: 'User',
                            attributes: ['id: number', 'name: string'],
                            methods: ['login()', 'logout()'],
                        },
                    ],
                    relationships: [],
                };
            case 'sequence':
                return {
                    actors: ['Áî®Êà∑', 'Á≥ªÁªü'],
                    messages: [
                        { from: 'Áî®Êà∑', to: 'Á≥ªÁªü', text: 'ÁôªÂΩïËØ∑Ê±Ç' },
                        { from: 'Á≥ªÁªü', to: 'Áî®Êà∑', text: 'ËøîÂõûÁªìÊûú' },
                    ],
                };
            case 'gantt':
                return {
                    tasks: [
                        {
                            name: '‰ªªÂä°1',
                            start: new Date().toISOString(),
                            end: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
                            progress: 0,
                        },
                    ],
                };
            default:
                return {};
        }
    }
    /**
     * ÂØºÂá∫ÂõæË°®
     */
    async exportDiagram() {
        const node = this.getSelectedDiagramNode();
        if (!node)
            return;
        const type = node.dataset.diagramType;
        const data = JSON.parse(node.dataset.diagramData || '{}');
        // ËÆ©Ê∏≤ÊüìÂô®ÂØºÂá∫
        await this.renderer?.export(node, type, data);
    }
    /**
     * Ëé∑ÂèñÈÄâ‰∏≠ÁöÑÂõæË°®ËäÇÁÇπ
     */
    getSelectedDiagramNode() {
        const selection = window.getSelection();
        if (!selection || selection.rangeCount === 0)
            return null;
        const range = selection.getRangeAt(0);
        const container = range.commonAncestorContainer;
        const element = container.nodeType === Node.TEXT_NODE
            ? container.parentElement
            : container;
        return element?.closest('.diagram-node') || null;
    }
    /**
     * ÈîÄÊØÅÊèí‰ª∂
     */
    destroy() {
        logger.info('Destroying diagram plugin');
        // Ê∏ÖÁêÜÁºñËæëÂô®
        this.editors.forEach(editor => editor.destroy?.());
        this.editors.clear();
        // Ê∏ÖÁêÜÁªÑ‰ª∂
        this.renderer?.destroy();
        this.toolbar?.destroy();
        // Ê∏ÖÁêÜÂΩìÂâçÁºñËæëÂô®
        if (this.currentEditor)
            this.currentEditor.destroy?.();
        logger.info('Diagram plugin destroyed');
    }
}

export { DiagramPlugin };
/*! End of @ldesign/editor-core | Powered by @ldesign/builder */
//# sourceMappingURL=DiagramPlugin.js.map
